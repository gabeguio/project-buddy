{
  "users": [
    {
      "PutRequest": {
        "Item": {
          "userId": {
            "S": "5f9a8b3c"
          },
          "dateUserCreatedAt": {
            "S": "2023-04-01T00:00:00Z"
          },
          "dateUserLastUpdatedAt": {
            "S": "2023-12-17T00:00:00Z"
          },
          "userFirstName": {
            "S": "Gabe"
          },
          "userLastName": {
            "S": "Guio"
          },
          "userCurrentCompany": {
            "S": "Unemployed"
          },
          "userPrimaryEmail": {
            "S": "gabegoescoding@gmail.com"
          }
        }
      }
    }
  ],
  "projects": [
    {
      "PutRequest": {
        "Item": {
          "projectId": {
            "S": "aB3Rt7"
          },
          "projectOwnerByUserId": {
            "S": "5f9a8b3c"
          },
          "dateProjectCreatedAt": {
            "S": "2023-04-01T00:00:00Z"
          },
          "dateProjectLastUpdatedAt": {
            "S": "2024-12-17T00:00:00Z"
          },
          "dateProjectDueAt": {
            "S": "2024-01-01T00:00:00Z"
          },
          "projectTitle": {
            "S": "Project Buddy"
          },
          "projectDescription": {
            "S": "Project Buddy is an innovative full-stack, mobile-first web application designed to streamline project management and collaboration. This platform empowers users by providing a comprehensive suite of tools to efficiently manage members and tasks within projects. Seamlessly integrating functionality and aesthetics, Project Buddy offers an intuitive user experience."
          },
          "totalTasksCompletedOnProject": {
            "N": "14"
          },
          "totalTasksCreatedOnProject": {
            "N": "16"
          },
          "memberIdWithMostCompletedTasksOnProject": {
            "S": "abcde12345"
          }
        }
      }
    }
  ],
  "members": [
    {
      "PutRequest": {
        "Item": {
          "projectId": {
            "S": "aB3Rt7"
          },
          "userId": {
            "S": "5f9a8b3c"
          },
          "memberId": {
            "S": "aB3cD9eF5g"
          },
          "dateJoinedProjectAt": {
            "S": "2023-04-01T00:00:00Z"
          },
          "tasksCurrentlyAssignedTo": {
            "SS": ["vwxyz12345"]
          },
          "tasksCompleted": {
            "SS": []
          }
        }
      }
    }
  ],
  "tasks": [
    {
      "PutRequest": {
        "Item": {
          "projectId": {
            "S": "aB3Rt7"
          },
          "taskId": {
            "S": "qR6sT4uV5w"
          },
          "taskAssignedToMemberId": {
            "S": "aB3cD9eF5g"
          },
          "dateTaskCreatedAt": {
            "S": "2023-10-26T00:00:00Z"
          },
          "dateTaskLastUpdatedAt": {
            "S": "2023-10-26T00:00:00Z"
          },
          "dateTaskDueAt": {
            "S": "2024-01-01T00:00:00Z"
          },
          "taskTitle": {
            "S": "task-1_Projects_Get-Projects-Request"
          },
          "taskDescription": {
            "S": "Design a UI for getting a list of project components with project details (title, description, owner, deadline, etc). Ensure that all screen sizes from SM Mobile to L Laptop are configured properly using programmed CSS size variables in your minimum-width media queries. Create an API endpoint in Java to handle incoming requests for all projects. Integrate the API endpoint with the front-end client using Axios. Validate and store project information in Projects DynamoDB table."
          },
          "taskStatus": {
            "S": "Completed"
          }
        }
      }
    },
    {
      "PutRequest": {
        "Item": {
          "projectId": {
            "S": "aB3Rt7"
          },
          "taskId": {
            "S": "xY1zZ3aB7c"
          },
          "taskAssignedToMemberId": {
            "S": "aB3cD9eF5g"
          },
          "dateTaskCreatedAt": {
            "S": "2023-10-26T00:00:00Z"
          },
          "dateTaskLastUpdatedAt": {
            "S": "2023-10-26T00:00:00Z"
          },
          "dateTaskDueAt": {
            "S": "2024-01-01T00:00:00Z"
          },
          "taskTitle": {
            "S": "task-2_Project-Dashboard"
          },
          "taskDescription": {
            "S": "Design a UI for building a components-based dashboard with specific project details (details, members, tasks). Ensure that all screen sizes from SM Mobile to L Laptop are configured properly using programmed CSS size variables in your minimum-width media queries. The dashboard will allow easy navigation to different sections of information on the project. Posted new tasks, members, and editing all models associated to a single project. Sections will include About, Members, and Tasks."
          },
          "taskStatus": {
            "S": "Completed"
          }
        }
      }
    },
    {
      "PutRequest": {
        "Item": {
          "projectId": {
            "S": "aB3Rt7"
          },
          "taskId": {
            "S": "D8eF5gH2iJ"
          },
          "taskAssignedToMemberId": {
            "S": "aB3cD9eF5g"
          },
          "dateTaskCreatedAt": {
            "S": "2023-10-26T00:00:00Z"
          },
          "dateTaskLastUpdatedAt": {
            "S": "2023-10-26T00:00:00Z"
          },
          "dateTaskDueAt": {
            "S": "2024-01-01T00:00:00Z"
          },
          "taskTitle": {
            "S": "task-2.1_Project-Dashboard_Navigation-Bar"
          },
          "taskDescription": {
            "S": "Each section will be a single toggle button on a navigation bar. The Navigation bar will include extra buttons that allow for adding a member or tasks associated with the current project. Navigation-Bar should include About, Members, and Tasks section."
          },
          "taskStatus": {
            "S": "Completed"
          }
        }
      }
    },
    {
      "PutRequest": {
        "Item": {
          "projectId": {
            "S": "aB3Rt7"
          },
          "taskId": {
            "S": "K4lM6nO0pQ"
          },
          "taskAssignedToMemberId": {
            "S": "aB3cD9eF5g"
          },
          "dateTaskCreatedAt": {
            "S": "2023-10-26T00:00:00Z"
          },
          "dateTaskLastUpdatedAt": {
            "S": "2023-10-26T00:00:00Z"
          },
          "dateTaskDueAt": {
            "S": "2024-01-01T00:00:00Z"
          },
          "taskTitle": {
            "S": "task-2.2_Project-Dashboard_About-Section"
          },
          "taskDescription": {
            "S": "The about section will contain various attributes tracked and saved for each project. The About section should display project description, and helpful information such as number of tasks completed, number tasks total, the owner of the project, the project deadline, the project creation date, the last time the project was updated, and the top contributor to the project. "
          },
          "taskStatus": {
            "S": "Completed"
          }
        }
      }
    },
    {
      "PutRequest": {
        "Item": {
          "projectId": {
            "S": "aB3Rt7"
          },
          "taskId": {
            "S": "R9sT1uV3wX"
          },
          "taskAssignedToMemberId": {
            "S": "aB3cD9eF5g"
          },
          "dateTaskCreatedAt": {
            "S": "2023-10-26T00:00:00Z"
          },
          "dateTaskLastUpdatedAt": {
            "S": "2023-10-26T00:00:00Z"
          },
          "dateTaskDueAt": {
            "S": "2024-01-01T00:00:00Z"
          },
          "taskTitle": {
            "S": "task-2.2.1_Project-Dashboard_About-Section_Get-Project-Activity"
          },
          "taskDescription": {
            "S": "Create an API endpoint that retrieves a project by projectId from the Projects table. The information in the response should include all the attributes on the project. Back-end service will be built in Java and served by AWS Lambda. This feature must include a request, result, activity, and lambda class. Data Access Object methods should get the single project record associated with the projectId Hash key. Edge cases include calling API with a null projectId return projectIdNotFoundException. Calling a non-null projectId that does not exist in the DB returns projectIdNotFoundException. Include messages for exceptions. Developer must include 80% test coverage on implemented classes/methods. "
          },
          "taskStatus": {
            "S": "Completed"
          }
        }
      }
    },
    {
      "PutRequest": {
        "Item": {
          "projectId": {
            "S": "aB3Rt7"
          },
          "taskId": {
            "S": "Y5zZ7A2bC"
          },
          "taskAssignedToMemberId": {
            "S": "aB3cD9eF5g"
          },
          "dateTaskCreatedAt": {
            "S": "2023-10-26T00:00:00Z"
          },
          "dateTaskLastUpdatedAt": {
            "S": "2023-10-26T00:00:00Z"
          },
          "dateTaskDueAt": {
            "S": "2024-01-01T00:00:00Z"
          },
          "taskTitle": {
            "S": "task-2.3_Project-Dashboard_Members-Section"
          },
          "taskDescription": {
            "S": "Members are users associated on the project. The Members section should display details for the member information should be displayed on a spreadsheet. Each member should include a button to edit the information for each member. Create an API endpoint in Java to handle incoming requests for an retrieving all members associated to a project. "
          },
          "taskStatus": {
            "S": "Completed"
          }
        }
      }
    },
    {
      "PutRequest": {
        "Item": {
          "projectId": {
            "S": "aB3Rt7"
          },
          "taskId": {
            "S": "E2fG8hI4j"
          },
          "taskAssignedToMemberId": {
            "S": "aB3cD9eF5g"
          },
          "dateTaskCreatedAt": {
            "S": "2023-10-26T00:00:00Z"
          },
          "dateTaskLastUpdatedAt": {
            "S": "2023-10-26T00:00:00Z"
          },
          "dateTaskDueAt": {
            "S": "2024-01-01T00:00:00Z"
          },
          "taskTitle": {
            "S": "task-2.3.1_Project-Dashboard_Members-Section_Get-Members-Request"
          },
          "taskDescription": {
            "S": "Create an API endpoint that retrieves all members by projectId from the Members tables. The information in the response should include all the attributes on the project. Back-end service will be built in Java and served by AWS Lambda. This feature must include a request, result, activity, and lambda class. Data Access Object methods should get a list of all members associated with the projectId Hash key. Edge cases include calling Members table with a null projectId or a projectId that does not exist should projectIdNotFoundException. Include messages for exceptions. Developer must include 80% test coverage on implemented classes/methods."
          },
          "taskStatus": {
            "S": "Completed"
          }
        }
      }
    },
    {
      "PutRequest": {
        "Item": {
          "projectId": {
            "S": "aB3Rt7"
          },
          "taskId": {
            "S": "M0nO9pQ6r"
          },
          "taskAssignedToMemberId": {
            "S": "aB3cD9eF5g"
          },
          "dateTaskCreatedAt": {
            "S": "2023-10-26T00:00:00Z"
          },
          "dateTaskLastUpdatedAt": {
            "S": "2023-10-26T00:00:00Z"
          },
          "dateTaskDueAt": {
            "S": "2024-01-01T00:00:00Z"
          },
          "taskTitle": {
            "S": "task-2.4_Project-Dashboard_Tasks-Section"
          },
          "taskDescription": {
            "S": "Tasks are added to each projects. The Tasks section will include two displays depending on the device. For larger devices, the tasks will be divided into columns, categorized by status from left to right. Going from left to right, tasks should be labeled To Do, In Progress, Under Review, and Completed. For smaller devices, the tasks will show up in a single column, and the user will be able to select the status of a task. Each task should display a truncated description, any members currently assigned to a task, any deadline set for the task, a dropdown button to edit the details on the task or move the task to a different status-category. Create an API endpoint in Java to handle incoming requests for an retrieving all members associated to a project. "
          },
          "taskStatus": {
            "S": "Completed"
          }
        }
      }
    },
    {
      "PutRequest": {
        "Item": {
          "projectId": {
            "S": "aB3Rt7"
          },
          "taskId": {
            "S": "T4uV5wX1y"
          },
          "taskAssignedToMemberId": {
            "S": "aB3cD9eF5g"
          },
          "dateTaskCreatedAt": {
            "S": "2023-10-26T00:00:00Z"
          },
          "dateTaskLastUpdatedAt": {
            "S": "2023-10-26T00:00:00Z"
          },
          "dateTaskDueAt": {
            "S": "2024-01-01T00:00:00Z"
          },
          "taskTitle": {
            "S": "task-2.4.1_Project-Dashboard_Tasks-Section_Get-Tasks-Request"
          },
          "taskDescription": {
            "S": "Create an API endpoint that retrieves all tasks by projectId from the Tasks table. The information in the response should include all tasks composed on the project. Back-end service will be built in Java and served by AWS Lambda. This feature must include a request, result, activity, and lambda class. Data Access Object methods should get a list of all tasks associated with the projectId Hash key. Edge cases include calling Tasks table with a null projectId or a projectId that does not exist should projectIdNotFoundException. Include messages for exceptions. Developer must include 80% test coverage on implemented classes/methods. "
          },
          "taskStatus": {
            "S": "Completed"
          }
        }
      }
    },
    {
      "PutRequest": {
        "Item": {
          "projectId": {
            "S": "aB3Rt7"
          },
          "taskId": {
            "S": "Z3aB7cD8e"
          },
          "taskAssignedToMemberId": {
            "S": "aB3cD9eF5g"
          },
          "dateTaskCreatedAt": {
            "S": "2023-10-26T00:00:00Z"
          },
          "dateTaskLastUpdatedAt": {
            "S": "2023-10-26T00:00:00Z"
          },
          "dateTaskDueAt": {
            "S": "2024-01-01T00:00:00Z"
          },
          "taskTitle": {
            "S": "task-3_Implement-Coming-Soon-Alert-Buttons"
          },
          "taskDescription": {
            "S": "Project Buddy is actively being updated. Add alert buttons on all unfinished features."
          },
          "taskStatus": {
            "S": "Completed"
          }
        }
      }
    },
    {
      "PutRequest": {
        "Item": {
          "projectId": {
            "S": "aB3Rt7"
          },
          "taskId": {
            "S": "iJ4kL6mN0o"
          },
          "taskAssignedToMemberId": {
            "S": "aB3cD9eF5g"
          },
          "dateTaskCreatedAt": {
            "S": "2023-10-26T00:00:00Z"
          },
          "dateTaskLastUpdatedAt": {
            "S": "2023-10-26T00:00:00Z"
          },
          "dateTaskDueAt": {
            "S": "2024-01-01T00:00:00Z"
          },
          "taskTitle": {
            "S": "task-4_Night-And-Light-Mode"
          },
          "taskDescription": {
            "S": "Include a toggle switch for night/light mode. Include a sun button on the desktop/mobile headers to change between modes. The default theme for the website is dark mode which includes shades of gray, black, white, and our primary/secondary colors. Black is a color variables that exists on the document root named —clr-dark. White is a name —clr-light. When the switch is toggled, add a class to the document.body element that inverts the dark/light variables. To save the users preference between different sessions/pages, include a cache the users toggle state in the local storage on the web browser."
          },
          "taskStatus": {
            "S": "Completed"
          }
        }
      }
    },
    {
      "PutRequest": {
        "Item": {
          "projectId": {
            "S": "aB3Rt7"
          },
          "taskId": {
            "S": "pQ9rS1tU3v"
          },
          "taskAssignedToMemberId": {
            "S": "aB3cD9eF5g"
          },
          "dateTaskCreatedAt": {
            "S": "2023-10-26T00:00:00Z"
          },
          "dateTaskLastUpdatedAt": {
            "S": "2023-10-26T00:00:00Z"
          },
          "dateTaskDueAt": {
            "S": "2024-01-01T00:00:00Z"
          },
          "taskTitle": {
            "S": "task-5_Mobile-Navigation-Menu"
          },
          "taskDescription": {
            "S": "For device screen widths that are larger than 768px remove the menu bars to open the mobile-nav container. The mobile-nav element opens and closes a mobile navigation menu upon toggle. Include navigation back to home, toggle for dark/light mode, and a user login/logout button."
          },
          "taskStatus": {
            "S": "Completed"
          }
        }
      }
    }
  ]
}
